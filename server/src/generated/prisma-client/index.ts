// Code generated by Prisma (prisma@1.23.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from 'graphql'
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model,
} from 'prisma-client-lib'
import { typeDefs } from './prisma-schema'

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U]

export interface Exists {
  event: (where?: EventWhereInput) => Promise<boolean>
  ticket: (where?: TicketWhereInput) => Promise<boolean>
  user: (where?: UserWhereInput) => Promise<boolean>
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>
}

export interface Prisma {
  $exists: Exists
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any },
  ) => Promise<T>

  /**
   * Queries
   */

  event: (where: EventWhereUniqueInput) => EventPromise
  events: (
    args?: {
      where?: EventWhereInput
      orderBy?: EventOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => FragmentableArray<Event>
  eventsConnection: (
    args?: {
      where?: EventWhereInput
      orderBy?: EventOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => EventConnectionPromise
  ticket: (where: TicketWhereUniqueInput) => TicketPromise
  tickets: (
    args?: {
      where?: TicketWhereInput
      orderBy?: TicketOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => FragmentableArray<Ticket>
  ticketsConnection: (
    args?: {
      where?: TicketWhereInput
      orderBy?: TicketOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => TicketConnectionPromise
  user: (where: UserWhereUniqueInput) => UserPromise
  users: (
    args?: {
      where?: UserWhereInput
      orderBy?: UserOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => FragmentableArray<User>
  usersConnection: (
    args?: {
      where?: UserWhereInput
      orderBy?: UserOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => UserConnectionPromise
  node: (args: { id: ID_Output }) => Node

  /**
   * Mutations
   */

  createEvent: (data: EventCreateInput) => EventPromise
  updateEvent: (
    args: { data: EventUpdateInput; where: EventWhereUniqueInput },
  ) => EventPromise
  updateManyEvents: (
    args: { data: EventUpdateManyMutationInput; where?: EventWhereInput },
  ) => BatchPayloadPromise
  upsertEvent: (
    args: {
      where: EventWhereUniqueInput
      create: EventCreateInput
      update: EventUpdateInput
    },
  ) => EventPromise
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise
  createTicket: (data: TicketCreateInput) => TicketPromise
  updateTicket: (
    args: { data: TicketUpdateInput; where: TicketWhereUniqueInput },
  ) => TicketPromise
  updateManyTickets: (
    args: { data: TicketUpdateManyMutationInput; where?: TicketWhereInput },
  ) => BatchPayloadPromise
  upsertTicket: (
    args: {
      where: TicketWhereUniqueInput
      create: TicketCreateInput
      update: TicketUpdateInput
    },
  ) => TicketPromise
  deleteTicket: (where: TicketWhereUniqueInput) => TicketPromise
  deleteManyTickets: (where?: TicketWhereInput) => BatchPayloadPromise
  createUser: (data: UserCreateInput) => UserPromise
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput },
  ) => UserPromise
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput },
  ) => BatchPayloadPromise
  upsertUser: (
    args: {
      where: UserWhereUniqueInput
      create: UserCreateInput
      update: UserUpdateInput
    },
  ) => UserPromise
  deleteUser: (where: UserWhereUniqueInput) => UserPromise
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise

  /**
   * Subscriptions
   */

  $subscribe: Subscription
}

export interface Subscription {
  event: (
    where?: EventSubscriptionWhereInput,
  ) => EventSubscriptionPayloadSubscription
  ticket: (
    where?: TicketSubscriptionWhereInput,
  ) => TicketSubscriptionPayloadSubscription
  user: (
    where?: UserSubscriptionWhereInput,
  ) => UserSubscriptionPayloadSubscription
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T
}

/**
 * Types
 */

export type UserStatus = 'ADMIN' | 'MODERATOR' | 'CUSTOMER'

export type TicketOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'isValidated_ASC'
  | 'isValidated_DESC'

export type EventOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'location_ASC'
  | 'location_DESC'
  | 'period_ASC'
  | 'period_DESC'
  | 'date_ASC'
  | 'date_DESC'
  | 'published_ASC'
  | 'published_DESC'
  | 'numberOfTickets_ASC'
  | 'numberOfTickets_DESC'

export type UserOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'email_ASC'
  | 'email_DESC'

export type MutationType = 'CREATED' | 'UPDATED' | 'DELETED'

export type EventWhereUniqueInput = AtLeastOne<{
  id: ID_Input
}>

export interface TicketWhereInput {
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTimeInput
  createdAt_not?: DateTimeInput
  createdAt_in?: DateTimeInput[] | DateTimeInput
  createdAt_not_in?: DateTimeInput[] | DateTimeInput
  createdAt_lt?: DateTimeInput
  createdAt_lte?: DateTimeInput
  createdAt_gt?: DateTimeInput
  createdAt_gte?: DateTimeInput
  updatedAt?: DateTimeInput
  updatedAt_not?: DateTimeInput
  updatedAt_in?: DateTimeInput[] | DateTimeInput
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput
  updatedAt_lt?: DateTimeInput
  updatedAt_lte?: DateTimeInput
  updatedAt_gt?: DateTimeInput
  updatedAt_gte?: DateTimeInput
  event?: EventWhereInput
  owner?: UserWhereInput
  isValidated?: Boolean
  isValidated_not?: Boolean
  AND?: TicketWhereInput[] | TicketWhereInput
  OR?: TicketWhereInput[] | TicketWhereInput
  NOT?: TicketWhereInput[] | TicketWhereInput
}

export interface EventWhereInput {
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTimeInput
  createdAt_not?: DateTimeInput
  createdAt_in?: DateTimeInput[] | DateTimeInput
  createdAt_not_in?: DateTimeInput[] | DateTimeInput
  createdAt_lt?: DateTimeInput
  createdAt_lte?: DateTimeInput
  createdAt_gt?: DateTimeInput
  createdAt_gte?: DateTimeInput
  updatedAt?: DateTimeInput
  updatedAt_not?: DateTimeInput
  updatedAt_in?: DateTimeInput[] | DateTimeInput
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput
  updatedAt_lt?: DateTimeInput
  updatedAt_lte?: DateTimeInput
  updatedAt_gt?: DateTimeInput
  updatedAt_gte?: DateTimeInput
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  description?: String
  description_not?: String
  description_in?: String[] | String
  description_not_in?: String[] | String
  description_lt?: String
  description_lte?: String
  description_gt?: String
  description_gte?: String
  description_contains?: String
  description_not_contains?: String
  description_starts_with?: String
  description_not_starts_with?: String
  description_ends_with?: String
  description_not_ends_with?: String
  location?: String
  location_not?: String
  location_in?: String[] | String
  location_not_in?: String[] | String
  location_lt?: String
  location_lte?: String
  location_gt?: String
  location_gte?: String
  location_contains?: String
  location_not_contains?: String
  location_starts_with?: String
  location_not_starts_with?: String
  location_ends_with?: String
  location_not_ends_with?: String
  period?: Int
  period_not?: Int
  period_in?: Int[] | Int
  period_not_in?: Int[] | Int
  period_lt?: Int
  period_lte?: Int
  period_gt?: Int
  period_gte?: Int
  date?: DateTimeInput
  date_not?: DateTimeInput
  date_in?: DateTimeInput[] | DateTimeInput
  date_not_in?: DateTimeInput[] | DateTimeInput
  date_lt?: DateTimeInput
  date_lte?: DateTimeInput
  date_gt?: DateTimeInput
  date_gte?: DateTimeInput
  published?: Boolean
  published_not?: Boolean
  numberOfTickets?: Int
  numberOfTickets_not?: Int
  numberOfTickets_in?: Int[] | Int
  numberOfTickets_not_in?: Int[] | Int
  numberOfTickets_lt?: Int
  numberOfTickets_lte?: Int
  numberOfTickets_gt?: Int
  numberOfTickets_gte?: Int
  tickets_every?: TicketWhereInput
  tickets_some?: TicketWhereInput
  tickets_none?: TicketWhereInput
  AND?: EventWhereInput[] | EventWhereInput
  OR?: EventWhereInput[] | EventWhereInput
  NOT?: EventWhereInput[] | EventWhereInput
}

export interface UserWhereInput {
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTimeInput
  createdAt_not?: DateTimeInput
  createdAt_in?: DateTimeInput[] | DateTimeInput
  createdAt_not_in?: DateTimeInput[] | DateTimeInput
  createdAt_lt?: DateTimeInput
  createdAt_lte?: DateTimeInput
  createdAt_gt?: DateTimeInput
  createdAt_gte?: DateTimeInput
  updatedAt?: DateTimeInput
  updatedAt_not?: DateTimeInput
  updatedAt_in?: DateTimeInput[] | DateTimeInput
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput
  updatedAt_lt?: DateTimeInput
  updatedAt_lte?: DateTimeInput
  updatedAt_gt?: DateTimeInput
  updatedAt_gte?: DateTimeInput
  status?: UserStatus
  status_not?: UserStatus
  status_in?: UserStatus[] | UserStatus
  status_not_in?: UserStatus[] | UserStatus
  email?: String
  email_not?: String
  email_in?: String[] | String
  email_not_in?: String[] | String
  email_lt?: String
  email_lte?: String
  email_gt?: String
  email_gte?: String
  email_contains?: String
  email_not_contains?: String
  email_starts_with?: String
  email_not_starts_with?: String
  email_ends_with?: String
  email_not_ends_with?: String
  tickets_every?: TicketWhereInput
  tickets_some?: TicketWhereInput
  tickets_none?: TicketWhereInput
  AND?: UserWhereInput[] | UserWhereInput
  OR?: UserWhereInput[] | UserWhereInput
  NOT?: UserWhereInput[] | UserWhereInput
}

export type TicketWhereUniqueInput = AtLeastOne<{
  id: ID_Input
}>

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input
  email?: String
}>

export interface EventCreateInput {
  name: String
  description: String
  location: String
  period: Int
  date: DateTimeInput
  published?: Boolean
  numberOfTickets: Int
  tickets?: TicketCreateManyWithoutEventInput
}

export interface TicketCreateManyWithoutEventInput {
  create?: TicketCreateWithoutEventInput[] | TicketCreateWithoutEventInput
  connect?: TicketWhereUniqueInput[] | TicketWhereUniqueInput
}

export interface TicketCreateWithoutEventInput {
  owner: UserCreateOneWithoutTicketsInput
  isValidated?: Boolean
}

export interface UserCreateOneWithoutTicketsInput {
  create?: UserCreateWithoutTicketsInput
  connect?: UserWhereUniqueInput
}

export interface UserCreateWithoutTicketsInput {
  status: UserStatus
  email: String
}

export interface EventUpdateInput {
  name?: String
  description?: String
  location?: String
  period?: Int
  date?: DateTimeInput
  published?: Boolean
  numberOfTickets?: Int
  tickets?: TicketUpdateManyWithoutEventInput
}

export interface TicketUpdateManyWithoutEventInput {
  create?: TicketCreateWithoutEventInput[] | TicketCreateWithoutEventInput
  delete?: TicketWhereUniqueInput[] | TicketWhereUniqueInput
  connect?: TicketWhereUniqueInput[] | TicketWhereUniqueInput
  disconnect?: TicketWhereUniqueInput[] | TicketWhereUniqueInput
  update?:
    | TicketUpdateWithWhereUniqueWithoutEventInput[]
    | TicketUpdateWithWhereUniqueWithoutEventInput
  upsert?:
    | TicketUpsertWithWhereUniqueWithoutEventInput[]
    | TicketUpsertWithWhereUniqueWithoutEventInput
  deleteMany?: TicketScalarWhereInput[] | TicketScalarWhereInput
  updateMany?:
    | TicketUpdateManyWithWhereNestedInput[]
    | TicketUpdateManyWithWhereNestedInput
}

export interface TicketUpdateWithWhereUniqueWithoutEventInput {
  where: TicketWhereUniqueInput
  data: TicketUpdateWithoutEventDataInput
}

export interface TicketUpdateWithoutEventDataInput {
  owner?: UserUpdateOneRequiredWithoutTicketsInput
  isValidated?: Boolean
}

export interface UserUpdateOneRequiredWithoutTicketsInput {
  create?: UserCreateWithoutTicketsInput
  update?: UserUpdateWithoutTicketsDataInput
  upsert?: UserUpsertWithoutTicketsInput
  connect?: UserWhereUniqueInput
}

export interface UserUpdateWithoutTicketsDataInput {
  status?: UserStatus
  email?: String
}

export interface UserUpsertWithoutTicketsInput {
  update: UserUpdateWithoutTicketsDataInput
  create: UserCreateWithoutTicketsInput
}

export interface TicketUpsertWithWhereUniqueWithoutEventInput {
  where: TicketWhereUniqueInput
  update: TicketUpdateWithoutEventDataInput
  create: TicketCreateWithoutEventInput
}

export interface TicketScalarWhereInput {
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTimeInput
  createdAt_not?: DateTimeInput
  createdAt_in?: DateTimeInput[] | DateTimeInput
  createdAt_not_in?: DateTimeInput[] | DateTimeInput
  createdAt_lt?: DateTimeInput
  createdAt_lte?: DateTimeInput
  createdAt_gt?: DateTimeInput
  createdAt_gte?: DateTimeInput
  updatedAt?: DateTimeInput
  updatedAt_not?: DateTimeInput
  updatedAt_in?: DateTimeInput[] | DateTimeInput
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput
  updatedAt_lt?: DateTimeInput
  updatedAt_lte?: DateTimeInput
  updatedAt_gt?: DateTimeInput
  updatedAt_gte?: DateTimeInput
  isValidated?: Boolean
  isValidated_not?: Boolean
  AND?: TicketScalarWhereInput[] | TicketScalarWhereInput
  OR?: TicketScalarWhereInput[] | TicketScalarWhereInput
  NOT?: TicketScalarWhereInput[] | TicketScalarWhereInput
}

export interface TicketUpdateManyWithWhereNestedInput {
  where: TicketScalarWhereInput
  data: TicketUpdateManyDataInput
}

export interface TicketUpdateManyDataInput {
  isValidated?: Boolean
}

export interface EventUpdateManyMutationInput {
  name?: String
  description?: String
  location?: String
  period?: Int
  date?: DateTimeInput
  published?: Boolean
  numberOfTickets?: Int
}

export interface TicketCreateInput {
  event: EventCreateOneWithoutTicketsInput
  owner: UserCreateOneWithoutTicketsInput
  isValidated?: Boolean
}

export interface EventCreateOneWithoutTicketsInput {
  create?: EventCreateWithoutTicketsInput
  connect?: EventWhereUniqueInput
}

export interface EventCreateWithoutTicketsInput {
  name: String
  description: String
  location: String
  period: Int
  date: DateTimeInput
  published?: Boolean
  numberOfTickets: Int
}

export interface TicketUpdateInput {
  event?: EventUpdateOneRequiredWithoutTicketsInput
  owner?: UserUpdateOneRequiredWithoutTicketsInput
  isValidated?: Boolean
}

export interface EventUpdateOneRequiredWithoutTicketsInput {
  create?: EventCreateWithoutTicketsInput
  update?: EventUpdateWithoutTicketsDataInput
  upsert?: EventUpsertWithoutTicketsInput
  connect?: EventWhereUniqueInput
}

export interface EventUpdateWithoutTicketsDataInput {
  name?: String
  description?: String
  location?: String
  period?: Int
  date?: DateTimeInput
  published?: Boolean
  numberOfTickets?: Int
}

export interface EventUpsertWithoutTicketsInput {
  update: EventUpdateWithoutTicketsDataInput
  create: EventCreateWithoutTicketsInput
}

export interface TicketUpdateManyMutationInput {
  isValidated?: Boolean
}

export interface UserCreateInput {
  status: UserStatus
  email: String
  tickets?: TicketCreateManyWithoutOwnerInput
}

export interface TicketCreateManyWithoutOwnerInput {
  create?: TicketCreateWithoutOwnerInput[] | TicketCreateWithoutOwnerInput
  connect?: TicketWhereUniqueInput[] | TicketWhereUniqueInput
}

export interface TicketCreateWithoutOwnerInput {
  event: EventCreateOneWithoutTicketsInput
  isValidated?: Boolean
}

export interface UserUpdateInput {
  status?: UserStatus
  email?: String
  tickets?: TicketUpdateManyWithoutOwnerInput
}

export interface TicketUpdateManyWithoutOwnerInput {
  create?: TicketCreateWithoutOwnerInput[] | TicketCreateWithoutOwnerInput
  delete?: TicketWhereUniqueInput[] | TicketWhereUniqueInput
  connect?: TicketWhereUniqueInput[] | TicketWhereUniqueInput
  disconnect?: TicketWhereUniqueInput[] | TicketWhereUniqueInput
  update?:
    | TicketUpdateWithWhereUniqueWithoutOwnerInput[]
    | TicketUpdateWithWhereUniqueWithoutOwnerInput
  upsert?:
    | TicketUpsertWithWhereUniqueWithoutOwnerInput[]
    | TicketUpsertWithWhereUniqueWithoutOwnerInput
  deleteMany?: TicketScalarWhereInput[] | TicketScalarWhereInput
  updateMany?:
    | TicketUpdateManyWithWhereNestedInput[]
    | TicketUpdateManyWithWhereNestedInput
}

export interface TicketUpdateWithWhereUniqueWithoutOwnerInput {
  where: TicketWhereUniqueInput
  data: TicketUpdateWithoutOwnerDataInput
}

export interface TicketUpdateWithoutOwnerDataInput {
  event?: EventUpdateOneRequiredWithoutTicketsInput
  isValidated?: Boolean
}

export interface TicketUpsertWithWhereUniqueWithoutOwnerInput {
  where: TicketWhereUniqueInput
  update: TicketUpdateWithoutOwnerDataInput
  create: TicketCreateWithoutOwnerInput
}

export interface UserUpdateManyMutationInput {
  status?: UserStatus
  email?: String
}

export interface EventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: EventWhereInput
  AND?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput
  OR?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput
  NOT?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput
}

export interface TicketSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: TicketWhereInput
  AND?: TicketSubscriptionWhereInput[] | TicketSubscriptionWhereInput
  OR?: TicketSubscriptionWhereInput[] | TicketSubscriptionWhereInput
  NOT?: TicketSubscriptionWhereInput[] | TicketSubscriptionWhereInput
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: UserWhereInput
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
}

export interface NodeNode {
  id: ID_Output
}

export interface Event {
  id: ID_Output
  createdAt: DateTimeOutput
  updatedAt: DateTimeOutput
  name: String
  description: String
  location: String
  period: Int
  date: DateTimeOutput
  published: Boolean
  numberOfTickets: Int
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  name: () => Promise<String>
  description: () => Promise<String>
  location: () => Promise<String>
  period: () => Promise<Int>
  date: () => Promise<DateTimeOutput>
  published: () => Promise<Boolean>
  numberOfTickets: () => Promise<Int>
  tickets: <T = FragmentableArray<Ticket>>(
    args?: {
      where?: TicketWhereInput
      orderBy?: TicketOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => T
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  name: () => Promise<AsyncIterator<String>>
  description: () => Promise<AsyncIterator<String>>
  location: () => Promise<AsyncIterator<String>>
  period: () => Promise<AsyncIterator<Int>>
  date: () => Promise<AsyncIterator<DateTimeOutput>>
  published: () => Promise<AsyncIterator<Boolean>>
  numberOfTickets: () => Promise<AsyncIterator<Int>>
  tickets: <T = Promise<AsyncIterator<TicketSubscription>>>(
    args?: {
      where?: TicketWhereInput
      orderBy?: TicketOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => T
}

export interface Ticket {
  id: ID_Output
  createdAt: DateTimeOutput
  updatedAt: DateTimeOutput
  isValidated: Boolean
}

export interface TicketPromise extends Promise<Ticket>, Fragmentable {
  id: () => Promise<ID_Output>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  event: <T = EventPromise>() => T
  owner: <T = UserPromise>() => T
  isValidated: () => Promise<Boolean>
}

export interface TicketSubscription
  extends Promise<AsyncIterator<Ticket>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  event: <T = EventSubscription>() => T
  owner: <T = UserSubscription>() => T
  isValidated: () => Promise<AsyncIterator<Boolean>>
}

export interface User {
  id: ID_Output
  createdAt: DateTimeOutput
  updatedAt: DateTimeOutput
  status: UserStatus
  email: String
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  status: () => Promise<UserStatus>
  email: () => Promise<String>
  tickets: <T = FragmentableArray<Ticket>>(
    args?: {
      where?: TicketWhereInput
      orderBy?: TicketOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => T
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  status: () => Promise<AsyncIterator<UserStatus>>
  email: () => Promise<AsyncIterator<String>>
  tickets: <T = Promise<AsyncIterator<TicketSubscription>>>(
    args?: {
      where?: TicketWhereInput
      orderBy?: TicketOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => T
}

export interface EventConnection {
  pageInfo: PageInfo
  edges: EventEdge[]
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T
  edges: <T = FragmentableArray<EventEdge>>() => T
  aggregate: <T = AggregateEventPromise>() => T
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T
  aggregate: <T = AggregateEventSubscription>() => T
}

export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>
  hasPreviousPage: () => Promise<Boolean>
  startCursor: () => Promise<String>
  endCursor: () => Promise<String>
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>
  startCursor: () => Promise<AsyncIterator<String>>
  endCursor: () => Promise<AsyncIterator<String>>
}

export interface EventEdge {
  node: Event
  cursor: String
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T
  cursor: () => Promise<String>
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface AggregateEvent {
  count: Int
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface TicketConnection {
  pageInfo: PageInfo
  edges: TicketEdge[]
}

export interface TicketConnectionPromise
  extends Promise<TicketConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T
  edges: <T = FragmentableArray<TicketEdge>>() => T
  aggregate: <T = AggregateTicketPromise>() => T
}

export interface TicketConnectionSubscription
  extends Promise<AsyncIterator<TicketConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<TicketEdgeSubscription>>>() => T
  aggregate: <T = AggregateTicketSubscription>() => T
}

export interface TicketEdge {
  node: Ticket
  cursor: String
}

export interface TicketEdgePromise extends Promise<TicketEdge>, Fragmentable {
  node: <T = TicketPromise>() => T
  cursor: () => Promise<String>
}

export interface TicketEdgeSubscription
  extends Promise<AsyncIterator<TicketEdge>>,
    Fragmentable {
  node: <T = TicketSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface AggregateTicket {
  count: Int
}

export interface AggregateTicketPromise
  extends Promise<AggregateTicket>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateTicketSubscription
  extends Promise<AsyncIterator<AggregateTicket>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface UserConnection {
  pageInfo: PageInfo
  edges: UserEdge[]
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T
  edges: <T = FragmentableArray<UserEdge>>() => T
  aggregate: <T = AggregateUserPromise>() => T
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T
  aggregate: <T = AggregateUserSubscription>() => T
}

export interface UserEdge {
  node: User
  cursor: String
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T
  cursor: () => Promise<String>
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface AggregateUser {
  count: Int
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface BatchPayload {
  count: Long
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>
}

export interface EventSubscriptionPayload {
  mutation: MutationType
  node: Event
  updatedFields: String[]
  previousValues: EventPreviousValues
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = EventPromise>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = EventPreviousValuesPromise>() => T
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = EventSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = EventPreviousValuesSubscription>() => T
}

export interface EventPreviousValues {
  id: ID_Output
  createdAt: DateTimeOutput
  updatedAt: DateTimeOutput
  name: String
  description: String
  location: String
  period: Int
  date: DateTimeOutput
  published: Boolean
  numberOfTickets: Int
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  name: () => Promise<String>
  description: () => Promise<String>
  location: () => Promise<String>
  period: () => Promise<Int>
  date: () => Promise<DateTimeOutput>
  published: () => Promise<Boolean>
  numberOfTickets: () => Promise<Int>
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  name: () => Promise<AsyncIterator<String>>
  description: () => Promise<AsyncIterator<String>>
  location: () => Promise<AsyncIterator<String>>
  period: () => Promise<AsyncIterator<Int>>
  date: () => Promise<AsyncIterator<DateTimeOutput>>
  published: () => Promise<AsyncIterator<Boolean>>
  numberOfTickets: () => Promise<AsyncIterator<Int>>
}

export interface TicketSubscriptionPayload {
  mutation: MutationType
  node: Ticket
  updatedFields: String[]
  previousValues: TicketPreviousValues
}

export interface TicketSubscriptionPayloadPromise
  extends Promise<TicketSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = TicketPromise>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = TicketPreviousValuesPromise>() => T
}

export interface TicketSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TicketSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = TicketSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = TicketPreviousValuesSubscription>() => T
}

export interface TicketPreviousValues {
  id: ID_Output
  createdAt: DateTimeOutput
  updatedAt: DateTimeOutput
  isValidated: Boolean
}

export interface TicketPreviousValuesPromise
  extends Promise<TicketPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  isValidated: () => Promise<Boolean>
}

export interface TicketPreviousValuesSubscription
  extends Promise<AsyncIterator<TicketPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  isValidated: () => Promise<AsyncIterator<Boolean>>
}

export interface UserSubscriptionPayload {
  mutation: MutationType
  node: User
  updatedFields: String[]
  previousValues: UserPreviousValues
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = UserPromise>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = UserPreviousValuesPromise>() => T
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = UserSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = UserPreviousValuesSubscription>() => T
}

export interface UserPreviousValues {
  id: ID_Output
  createdAt: DateTimeOutput
  updatedAt: DateTimeOutput
  status: UserStatus
  email: String
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  status: () => Promise<UserStatus>
  email: () => Promise<String>
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  status: () => Promise<AsyncIterator<UserStatus>>
  email: () => Promise<AsyncIterator<String>>
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

export type Long = string

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: 'Event',
    embedded: false,
  },
  {
    name: 'Ticket',
    embedded: false,
  },
  {
    name: 'User',
    embedded: false,
  },
  {
    name: 'UserStatus',
    embedded: false,
  },
]

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env['PRISMA_ENDPOINT']}`,
  secret: `${process.env['PRISMA_SECRET']}`,
})
export const prisma = new Prisma()
