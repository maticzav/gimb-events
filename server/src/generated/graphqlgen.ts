// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo, GraphQLIsTypeOfFn } from 'graphql'
import { User, Ticket, Event } from './prisma/binding'
import { LoginPayload } from '../models'
import { Context } from '../utils'

export namespace QueryResolvers {
  export const defaultResolvers = {}

  export interface ArgsTicket {
    id: string
  }

  export interface ArgsUsers {
    query?: string | null
  }

  export interface ArgsEvent {
    id: string
  }

  export interface ArgsEvents {
    query?: string | null
  }

  export type ViewerResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => User | null | Promise<User | null>)
    | {
        fragment: string
        resolver: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>
      }

  export type TicketResolver =
    | ((
        parent: undefined,
        args: ArgsTicket,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Ticket | null | Promise<Ticket | null>)
    | {
        fragment: string
        resolver: (
          parent: undefined,
          args: ArgsTicket,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Ticket | null | Promise<Ticket | null>
      }

  export type FeedResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Event[] | Promise<Event[]>)
    | {
        fragment: string
        resolver: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Event[] | Promise<Event[]>
      }

  export type UsersResolver =
    | ((
        parent: undefined,
        args: ArgsUsers,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => User[] | null | Promise<User[] | null>)
    | {
        fragment: string
        resolver: (
          parent: undefined,
          args: ArgsUsers,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User[] | null | Promise<User[] | null>
      }

  export type EventResolver =
    | ((
        parent: undefined,
        args: ArgsEvent,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Event | null | Promise<Event | null>)
    | {
        fragment: string
        resolver: (
          parent: undefined,
          args: ArgsEvent,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Event | null | Promise<Event | null>
      }

  export type EventsResolver =
    | ((
        parent: undefined,
        args: ArgsEvents,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Event[] | null | Promise<Event[] | null>)
    | {
        fragment: string
        resolver: (
          parent: undefined,
          args: ArgsEvents,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Event[] | null | Promise<Event[] | null>
      }

  export interface Type {
    viewer:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>)
      | {
          fragment: string
          resolver: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => User | null | Promise<User | null>
        }

    ticket:
      | ((
          parent: undefined,
          args: ArgsTicket,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Ticket | null | Promise<Ticket | null>)
      | {
          fragment: string
          resolver: (
            parent: undefined,
            args: ArgsTicket,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Ticket | null | Promise<Ticket | null>
        }

    feed:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Event[] | Promise<Event[]>)
      | {
          fragment: string
          resolver: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Event[] | Promise<Event[]>
        }

    users:
      | ((
          parent: undefined,
          args: ArgsUsers,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User[] | null | Promise<User[] | null>)
      | {
          fragment: string
          resolver: (
            parent: undefined,
            args: ArgsUsers,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => User[] | null | Promise<User[] | null>
        }

    event:
      | ((
          parent: undefined,
          args: ArgsEvent,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Event | null | Promise<Event | null>)
      | {
          fragment: string
          resolver: (
            parent: undefined,
            args: ArgsEvent,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Event | null | Promise<Event | null>
        }

    events:
      | ((
          parent: undefined,
          args: ArgsEvents,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Event[] | null | Promise<Event[] | null>)
      | {
          fragment: string
          resolver: (
            parent: undefined,
            args: ArgsEvents,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Event[] | null | Promise<Event[] | null>
        }
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => parent.email,
    isModerator: (parent: User) => parent.isModerator,
    isAdministrator: (parent: User) => parent.isAdministrator,
  }

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolver: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolver: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type TicketsResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Ticket[] | Promise<Ticket[]>)
    | {
        fragment: string
        resolver: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Ticket[] | Promise<Ticket[]>
      }

  export type IsModeratorResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => boolean | null | Promise<boolean | null>)
    | {
        fragment: string
        resolver: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | null | Promise<boolean | null>
      }

  export type IsAdministratorResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => boolean | null | Promise<boolean | null>)
    | {
        fragment: string
        resolver: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | null | Promise<boolean | null>
      }

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolver: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolver: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    tickets:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Ticket[] | Promise<Ticket[]>)
      | {
          fragment: string
          resolver: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Ticket[] | Promise<Ticket[]>
        }

    isModerator:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | null | Promise<boolean | null>)
      | {
          fragment: string
          resolver: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => boolean | null | Promise<boolean | null>
        }

    isAdministrator:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | null | Promise<boolean | null>)
      | {
          fragment: string
          resolver: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => boolean | null | Promise<boolean | null>
        }
  }
}

export namespace TicketResolvers {
  export const defaultResolvers = {
    id: (parent: Ticket) => parent.id,
    event: (parent: Ticket) => parent.event,
    owner: (parent: Ticket) => parent.owner,
    isValidated: (parent: Ticket) => parent.isValidated,
  }

  export type IdResolver =
    | ((
        parent: Ticket,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolver: (
          parent: Ticket,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type EventResolver =
    | ((
        parent: Ticket,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Event | Promise<Event>)
    | {
        fragment: string
        resolver: (
          parent: Ticket,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Event | Promise<Event>
      }

  export type OwnerResolver =
    | ((
        parent: Ticket,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => User | Promise<User>)
    | {
        fragment: string
        resolver: (
          parent: Ticket,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | Promise<User>
      }

  export type IsValidatedResolver =
    | ((
        parent: Ticket,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => boolean | Promise<boolean>)
    | {
        fragment: string
        resolver: (
          parent: Ticket,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>
      }

  export type IsExpiredResolver =
    | ((
        parent: Ticket,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => boolean | Promise<boolean>)
    | {
        fragment: string
        resolver: (
          parent: Ticket,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>
      }

  export interface Type {
    id:
      | ((
          parent: Ticket,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolver: (
            parent: Ticket,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    event:
      | ((
          parent: Ticket,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Event | Promise<Event>)
      | {
          fragment: string
          resolver: (
            parent: Ticket,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Event | Promise<Event>
        }

    owner:
      | ((
          parent: Ticket,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | Promise<User>)
      | {
          fragment: string
          resolver: (
            parent: Ticket,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => User | Promise<User>
        }

    isValidated:
      | ((
          parent: Ticket,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>)
      | {
          fragment: string
          resolver: (
            parent: Ticket,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>
        }

    isExpired:
      | ((
          parent: Ticket,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>)
      | {
          fragment: string
          resolver: (
            parent: Ticket,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>
        }
  }
}

export namespace PublicEventResolvers {
  export const defaultResolvers = {
    id: (parent: Event) => parent.id,
    name: (parent: Event) => parent.name,
    speaker: (parent: Event) => parent.speaker,
    description: (parent: Event) => parent.description,
    location: (parent: Event) => parent.location,
    period: (parent: Event) => parent.period,
    date: (parent: Event) => parent.date,
  }

  export type IdResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type NameResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type SpeakerResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type DescriptionResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type LocationResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type PeriodResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => number | Promise<number>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>
      }

  export type DateResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type ViewerHasTicketResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => boolean | Promise<boolean>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>
      }

  export type ViewerCanRequestTicketResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => boolean | Promise<boolean>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>
      }

  export type HasAvailableTicketsResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => boolean | Promise<boolean>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>
      }

  export interface Type {
    id:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    name:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    speaker:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    description:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    location:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    period:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => number | Promise<number>
        }

    date:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    viewerHasTicket:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>
        }

    viewerCanRequestTicket:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>
        }

    hasAvailableTickets:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>
        }

    __isTypeOf?: GraphQLIsTypeOfFn<Event | Event, Context>
  }
}

export namespace AdminEventResolvers {
  export const defaultResolvers = {
    id: (parent: Event) => parent.id,
    name: (parent: Event) => parent.name,
    speaker: (parent: Event) => parent.speaker,
    description: (parent: Event) => parent.description,
    location: (parent: Event) => parent.location,
    period: (parent: Event) => parent.period,
    date: (parent: Event) => parent.date,
    published: (parent: Event) => parent.published,
    numberOfTickets: (parent: Event) => parent.numberOfTickets,
  }

  export type IdResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type NameResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type SpeakerResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type DescriptionResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type LocationResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type PeriodResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => number | Promise<number>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>
      }

  export type DateResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type PublishedResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => boolean | Promise<boolean>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>
      }

  export type NumberOfTicketsResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => number | Promise<number>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>
      }

  export type NumberOfReservationsResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => number | Promise<number>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>
      }

  export type NumberOfValidatedTicketsResolver =
    | ((
        parent: Event,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => number | Promise<number>)
    | {
        fragment: string
        resolver: (
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>
      }

  export interface Type {
    id:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    name:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    speaker:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    description:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    location:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    period:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => number | Promise<number>
        }

    date:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    published:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>
        }

    numberOfTickets:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => number | Promise<number>
        }

    numberOfReservations:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => number | Promise<number>
        }

    numberOfValidatedTickets:
      | ((
          parent: Event,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>)
      | {
          fragment: string
          resolver: (
            parent: Event,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => number | Promise<number>
        }

    __isTypeOf?: GraphQLIsTypeOfFn<Event | Event, Context>
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {}

  export interface CreateEventInput {
    name: string
    speaker: string
    description: string
    location: string
    period: number
    date: string
    numberOfTickets: number
  }
  export interface UpdateEventInput {
    name?: string | null
    speaker?: string | null
    description?: string | null
    location?: string | null
    period?: number | null
    date?: string | null
    numberOfTickets?: number | null
  }
  export interface UpdateUserInput {
    isModerator?: boolean | null
    isAdministrator?: boolean | null
  }

  export interface ArgsLogin {
    email: string
  }

  export interface ArgsRequestTicket {
    eventId: string
  }

  export interface ArgsValidateTicket {
    id: string
  }

  export interface ArgsCreateEvent {
    data: CreateEventInput
  }

  export interface ArgsUpdateEvent {
    id: string
    data: UpdateEventInput
  }

  export interface ArgsDeleteEvent {
    id: string
  }

  export interface ArgsUpdateUser {
    id: string
    data: UpdateUserInput
  }

  export interface ArgsDeleteUser {
    id: string
  }

  export type LoginResolver =
    | ((
        parent: undefined,
        args: ArgsLogin,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => LoginPayload | Promise<LoginPayload>)
    | {
        fragment: string
        resolver: (
          parent: undefined,
          args: ArgsLogin,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => LoginPayload | Promise<LoginPayload>
      }

  export type RequestTicketResolver =
    | ((
        parent: undefined,
        args: ArgsRequestTicket,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Ticket | null | Promise<Ticket | null>)
    | {
        fragment: string
        resolver: (
          parent: undefined,
          args: ArgsRequestTicket,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Ticket | null | Promise<Ticket | null>
      }

  export type ValidateTicketResolver =
    | ((
        parent: undefined,
        args: ArgsValidateTicket,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Ticket | null | Promise<Ticket | null>)
    | {
        fragment: string
        resolver: (
          parent: undefined,
          args: ArgsValidateTicket,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Ticket | null | Promise<Ticket | null>
      }

  export type CreateEventResolver =
    | ((
        parent: undefined,
        args: ArgsCreateEvent,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Event | null | Promise<Event | null>)
    | {
        fragment: string
        resolver: (
          parent: undefined,
          args: ArgsCreateEvent,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Event | null | Promise<Event | null>
      }

  export type UpdateEventResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateEvent,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Event | null | Promise<Event | null>)
    | {
        fragment: string
        resolver: (
          parent: undefined,
          args: ArgsUpdateEvent,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Event | null | Promise<Event | null>
      }

  export type DeleteEventResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteEvent,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Event | null | Promise<Event | null>)
    | {
        fragment: string
        resolver: (
          parent: undefined,
          args: ArgsDeleteEvent,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Event | null | Promise<Event | null>
      }

  export type UpdateUserResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateUser,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => User | null | Promise<User | null>)
    | {
        fragment: string
        resolver: (
          parent: undefined,
          args: ArgsUpdateUser,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>
      }

  export type DeleteUserResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteUser,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => User | null | Promise<User | null>)
    | {
        fragment: string
        resolver: (
          parent: undefined,
          args: ArgsDeleteUser,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>
      }

  export interface Type {
    login:
      | ((
          parent: undefined,
          args: ArgsLogin,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => LoginPayload | Promise<LoginPayload>)
      | {
          fragment: string
          resolver: (
            parent: undefined,
            args: ArgsLogin,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => LoginPayload | Promise<LoginPayload>
        }

    requestTicket:
      | ((
          parent: undefined,
          args: ArgsRequestTicket,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Ticket | null | Promise<Ticket | null>)
      | {
          fragment: string
          resolver: (
            parent: undefined,
            args: ArgsRequestTicket,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Ticket | null | Promise<Ticket | null>
        }

    validateTicket:
      | ((
          parent: undefined,
          args: ArgsValidateTicket,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Ticket | null | Promise<Ticket | null>)
      | {
          fragment: string
          resolver: (
            parent: undefined,
            args: ArgsValidateTicket,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Ticket | null | Promise<Ticket | null>
        }

    createEvent:
      | ((
          parent: undefined,
          args: ArgsCreateEvent,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Event | null | Promise<Event | null>)
      | {
          fragment: string
          resolver: (
            parent: undefined,
            args: ArgsCreateEvent,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Event | null | Promise<Event | null>
        }

    updateEvent:
      | ((
          parent: undefined,
          args: ArgsUpdateEvent,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Event | null | Promise<Event | null>)
      | {
          fragment: string
          resolver: (
            parent: undefined,
            args: ArgsUpdateEvent,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Event | null | Promise<Event | null>
        }

    deleteEvent:
      | ((
          parent: undefined,
          args: ArgsDeleteEvent,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Event | null | Promise<Event | null>)
      | {
          fragment: string
          resolver: (
            parent: undefined,
            args: ArgsDeleteEvent,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Event | null | Promise<Event | null>
        }

    updateUser:
      | ((
          parent: undefined,
          args: ArgsUpdateUser,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>)
      | {
          fragment: string
          resolver: (
            parent: undefined,
            args: ArgsUpdateUser,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => User | null | Promise<User | null>
        }

    deleteUser:
      | ((
          parent: undefined,
          args: ArgsDeleteUser,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>)
      | {
          fragment: string
          resolver: (
            parent: undefined,
            args: ArgsDeleteUser,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => User | null | Promise<User | null>
        }
  }
}

export namespace LoginPayloadResolvers {
  export const defaultResolvers = {
    success: (parent: LoginPayload) => parent.success,
  }

  export type SuccessResolver =
    | ((
        parent: LoginPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => boolean | Promise<boolean>)
    | {
        fragment: string
        resolver: (
          parent: LoginPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>
      }

  export interface Type {
    success:
      | ((
          parent: LoginPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>)
      | {
          fragment: string
          resolver: (
            parent: LoginPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>
        }
  }
}

export namespace EventResolvers {
  export interface Type {
    __resolveType: (
      value: Event | Event,
      context: Context,
      info: GraphQLResolveInfo,
    ) => 'PublicEvent' | 'AdminEvent' | Promise<'PublicEvent' | 'AdminEvent'>
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type
  User: UserResolvers.Type
  Ticket: TicketResolvers.Type
  PublicEvent: PublicEventResolvers.Type
  AdminEvent: AdminEventResolvers.Type
  Mutation: MutationResolvers.Type
  LoginPayload: LoginPayloadResolvers.Type
  Event?: EventResolvers.Type
}
