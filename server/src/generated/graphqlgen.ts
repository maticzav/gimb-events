// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql'
import {
  Viewer,
  LoginPayload,
  Customer,
  Moderator,
  Administrator,
} from '../models'
import { Ticket, Event } from './prisma-client'
import { Context } from '../utils'

type UserStatus = 'ADMIN' | 'MODERATOR' | 'CUSTOMER'

export namespace QueryResolvers {
  export const defaultResolvers = {}

  export interface ArgsEvent {
    id: string
  }

  export type ViewerResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Viewer | null | Promise<Viewer | null>

  export type EventsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Event[] | Promise<Event[]>

  export type EventResolver = (
    parent: undefined,
    args: ArgsEvent,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Event | null | Promise<Event | null>

  export interface Type {
    viewer: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Viewer | null | Promise<Viewer | null>

    events: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Event[] | Promise<Event[]>

    event: (
      parent: undefined,
      args: ArgsEvent,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Event | null | Promise<Event | null>
  }
}

export namespace ViewerResolvers {
  export const defaultResolvers = {}

  export type UserResolver = (
    parent: Viewer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => {} | Promise<{}>

  export interface Type {
    user: (
      parent: Viewer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => {} | Promise<{}>
  }
}

export namespace TicketResolvers {
  export const defaultResolvers = {
    id: (parent: Ticket) => parent.id,
    isValidated: (parent: Ticket) => parent.isValidated,
  }

  export type IdResolver = (
    parent: Ticket,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type EventResolver = (
    parent: Ticket,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Event | Promise<Event>

  export type OwnerResolver = (
    parent: Ticket,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => {} | Promise<{}>

  export type IsValidatedResolver = (
    parent: Ticket,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => boolean | Promise<boolean>

  export interface Type {
    id: (
      parent: Ticket,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    event: (
      parent: Ticket,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Event | Promise<Event>

    owner: (
      parent: Ticket,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => {} | Promise<{}>

    isValidated: (
      parent: Ticket,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => boolean | Promise<boolean>
  }
}

export namespace EventResolvers {
  export const defaultResolvers = {
    id: (parent: Event) => parent.id,
    name: (parent: Event) => parent.name,
    description: (parent: Event) => parent.description,
    location: (parent: Event) => parent.location,
    period: (parent: Event) => parent.period,
    date: (parent: Event) => parent.date,
  }

  export type IdResolver = (
    parent: Event,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type NameResolver = (
    parent: Event,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type DescriptionResolver = (
    parent: Event,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type LocationResolver = (
    parent: Event,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type PeriodResolver = (
    parent: Event,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => number | Promise<number>

  export type DateResolver = (
    parent: Event,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type ViewerHasTicketResolver = (
    parent: Event,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => boolean | Promise<boolean>

  export interface Type {
    id: (
      parent: Event,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    name: (
      parent: Event,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    description: (
      parent: Event,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    location: (
      parent: Event,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    period: (
      parent: Event,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => number | Promise<number>

    date: (
      parent: Event,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    viewerHasTicket: (
      parent: Event,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => boolean | Promise<boolean>
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {}

  export interface CreateEventInput {
    name: string
    description: string
    location: string
    period: number
    date: string
    numberOfTickets: number
  }
  export interface UpdateEventInput {
    name: string | null
    description: string | null
    location: string | null
    period: number | null
    date: string | null
    numberOfTickets: number | null
  }
  export interface CreateUserInput {
    email: string
    status: UserStatus
  }
  export interface UpdateUserInput {
    email: string | null
    status: UserStatus | null
  }

  export interface ArgsLogin {
    email: string
  }

  export interface ArgsRequestTicket {
    event: string
  }

  export interface ArgsCreateEvent {
    data: CreateEventInput
  }

  export interface ArgsUpdateEvent {
    id: string
    data: UpdateEventInput | null
  }

  export interface ArgsDeleteEvent {
    id: string
  }

  export interface ArgsAddUser {
    data: CreateUserInput
  }

  export interface ArgsUpdateUser {
    id: string
    data: UpdateUserInput
  }

  export interface ArgsDeleteUser {
    id: string
  }

  export type LoginResolver = (
    parent: undefined,
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => LoginPayload | Promise<LoginPayload>

  export type RequestTicketResolver = (
    parent: undefined,
    args: ArgsRequestTicket,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Ticket | null | Promise<Ticket | null>

  export type CreateEventResolver = (
    parent: undefined,
    args: ArgsCreateEvent,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Event | null | Promise<Event | null>

  export type UpdateEventResolver = (
    parent: undefined,
    args: ArgsUpdateEvent,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Event | null | Promise<Event | null>

  export type DeleteEventResolver = (
    parent: undefined,
    args: ArgsDeleteEvent,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Event | null | Promise<Event | null>

  export type AddUserResolver = (
    parent: undefined,
    args: ArgsAddUser,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => {} | null | Promise<{} | null>

  export type UpdateUserResolver = (
    parent: undefined,
    args: ArgsUpdateUser,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => {} | null | Promise<{} | null>

  export type DeleteUserResolver = (
    parent: undefined,
    args: ArgsDeleteUser,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => {} | null | Promise<{} | null>

  export interface Type {
    login: (
      parent: undefined,
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => LoginPayload | Promise<LoginPayload>

    requestTicket: (
      parent: undefined,
      args: ArgsRequestTicket,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Ticket | null | Promise<Ticket | null>

    createEvent: (
      parent: undefined,
      args: ArgsCreateEvent,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Event | null | Promise<Event | null>

    updateEvent: (
      parent: undefined,
      args: ArgsUpdateEvent,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Event | null | Promise<Event | null>

    deleteEvent: (
      parent: undefined,
      args: ArgsDeleteEvent,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Event | null | Promise<Event | null>

    addUser: (
      parent: undefined,
      args: ArgsAddUser,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => {} | null | Promise<{} | null>

    updateUser: (
      parent: undefined,
      args: ArgsUpdateUser,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => {} | null | Promise<{} | null>

    deleteUser: (
      parent: undefined,
      args: ArgsDeleteUser,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => {} | null | Promise<{} | null>
  }
}

export namespace LoginPayloadResolvers {
  export const defaultResolvers = {}

  export type SuccessResolver = (
    parent: LoginPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => boolean | Promise<boolean>

  export interface Type {
    success: (
      parent: LoginPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => boolean | Promise<boolean>
  }
}

export namespace CustomerResolvers {
  export const defaultResolvers = {
    id: (parent: Customer) => parent.id,
    email: (parent: Customer) => parent.email,
    tickets: (parent: Customer) => parent.tickets,
  }

  export type IdResolver = (
    parent: Customer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type EmailResolver = (
    parent: Customer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type TicketsResolver = (
    parent: Customer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Ticket[] | Promise<Ticket[]>

  export interface Type {
    id: (
      parent: Customer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    email: (
      parent: Customer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    tickets: (
      parent: Customer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Ticket[] | Promise<Ticket[]>
  }
}

export namespace ModeratorResolvers {
  export const defaultResolvers = {
    id: (parent: Moderator) => parent.id,
    email: (parent: Moderator) => parent.email,
    tickets: (parent: Moderator) => parent.tickets,
  }

  export type IdResolver = (
    parent: Moderator,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type EmailResolver = (
    parent: Moderator,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type TicketsResolver = (
    parent: Moderator,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Ticket[] | Promise<Ticket[]>

  export type EventsResolver = (
    parent: Moderator,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Event[] | Promise<Event[]>

  export interface Type {
    id: (
      parent: Moderator,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    email: (
      parent: Moderator,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    tickets: (
      parent: Moderator,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Ticket[] | Promise<Ticket[]>

    events: (
      parent: Moderator,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Event[] | Promise<Event[]>
  }
}

export namespace AdministratorResolvers {
  export const defaultResolvers = {
    id: (parent: Administrator) => parent.id,
    email: (parent: Administrator) => parent.email,
    tickets: (parent: Administrator) => parent.tickets,
  }

  export type IdResolver = (
    parent: Administrator,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type EmailResolver = (
    parent: Administrator,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type TicketsResolver = (
    parent: Administrator,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Ticket[] | Promise<Ticket[]>

  export type EventsResolver = (
    parent: Administrator,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Event[] | Promise<Event[]>

  export interface Type {
    id: (
      parent: Administrator,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    email: (
      parent: Administrator,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    tickets: (
      parent: Administrator,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Ticket[] | Promise<Ticket[]>

    events: (
      parent: Administrator,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Event[] | Promise<Event[]>
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type
  Viewer: ViewerResolvers.Type
  Ticket: TicketResolvers.Type
  Event: EventResolvers.Type
  Mutation: MutationResolvers.Type
  LoginPayload: LoginPayloadResolvers.Type
  Customer: CustomerResolvers.Type
  Moderator: ModeratorResolvers.Type
  Administrator: AdministratorResolvers.Type
}
