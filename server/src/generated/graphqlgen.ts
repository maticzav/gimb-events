// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql'
import { Viewer, LoginPayload } from '../models'
import { User, Ticket, Event } from './prisma-client'
import { Context } from '../utils'

export namespace QueryResolvers {
  export const defaultResolvers = {}

  export interface ArgsEvent {
    id: string
  }

  export type ViewerResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Viewer | null | Promise<Viewer | null>

  export type EventsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Event[] | Promise<Event[]>

  export type EventResolver = (
    parent: undefined,
    args: ArgsEvent,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Event | null | Promise<Event | null>

  export interface Type {
    viewer: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Viewer | null | Promise<Viewer | null>

    events: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Event[] | Promise<Event[]>

    event: (
      parent: undefined,
      args: ArgsEvent,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Event | null | Promise<Event | null>
  }
}

export namespace ViewerResolvers {
  export const defaultResolvers = {
    user: (parent: Viewer) => parent.user,
    tickets: (parent: Viewer) => parent.tickets,
  }

  export type UserResolver = (
    parent: Viewer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | Promise<User>

  export type TicketsResolver = (
    parent: Viewer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Ticket[] | Promise<Ticket[]>

  export interface Type {
    user: (
      parent: Viewer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | Promise<User>

    tickets: (
      parent: Viewer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Ticket[] | Promise<Ticket[]>
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => parent.email,
  }

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>
  }
}

export namespace TicketResolvers {
  export const defaultResolvers = {
    id: (parent: Ticket) => parent.id,
    isValidated: (parent: Ticket) => parent.isValidated,
  }

  export type IdResolver = (
    parent: Ticket,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type EventResolver = (
    parent: Ticket,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Event | Promise<Event>

  export type OwnerResolver = (
    parent: Ticket,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | Promise<User>

  export type IsValidatedResolver = (
    parent: Ticket,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => boolean | Promise<boolean>

  export interface Type {
    id: (
      parent: Ticket,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    event: (
      parent: Ticket,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Event | Promise<Event>

    owner: (
      parent: Ticket,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | Promise<User>

    isValidated: (
      parent: Ticket,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => boolean | Promise<boolean>
  }
}

export namespace EventResolvers {
  export const defaultResolvers = {
    id: (parent: Event) => parent.id,
    name: (parent: Event) => parent.name,
    description: (parent: Event) => parent.description,
    location: (parent: Event) => parent.location,
    period: (parent: Event) => parent.period,
    date: (parent: Event) => parent.date,
  }

  export type IdResolver = (
    parent: Event,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type NameResolver = (
    parent: Event,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type DescriptionResolver = (
    parent: Event,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type LocationResolver = (
    parent: Event,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export type PeriodResolver = (
    parent: Event,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => number | Promise<number>

  export type DateResolver = (
    parent: Event,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>

  export interface Type {
    id: (
      parent: Event,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    name: (
      parent: Event,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    description: (
      parent: Event,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    location: (
      parent: Event,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>

    period: (
      parent: Event,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => number | Promise<number>

    date: (
      parent: Event,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {}

  export interface CreateEventInput {
    name: string
    description: string
    location: string
    period: number
    date: string
    numberOfTickets: number
  }
  export interface UpdateEventInput {
    name: string | null
    description: string | null
    location: string | null
    period: number | null
    date: string | null
    numberOfTickets: number | null
  }

  export interface ArgsLogin {
    email: string
  }

  export interface ArgsCreateEvent {
    data: CreateEventInput
  }

  export interface ArgsUpdateEvent {
    id: string
    data: UpdateEventInput | null
  }

  export interface ArgsDeleteEvent {
    id: string
  }

  export type LoginResolver = (
    parent: undefined,
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => LoginPayload | Promise<LoginPayload>

  export type CreateEventResolver = (
    parent: undefined,
    args: ArgsCreateEvent,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Event | null | Promise<Event | null>

  export type UpdateEventResolver = (
    parent: undefined,
    args: ArgsUpdateEvent,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Event | null | Promise<Event | null>

  export type DeleteEventResolver = (
    parent: undefined,
    args: ArgsDeleteEvent,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Event | null | Promise<Event | null>

  export interface Type {
    login: (
      parent: undefined,
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => LoginPayload | Promise<LoginPayload>

    createEvent: (
      parent: undefined,
      args: ArgsCreateEvent,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Event | null | Promise<Event | null>

    updateEvent: (
      parent: undefined,
      args: ArgsUpdateEvent,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Event | null | Promise<Event | null>

    deleteEvent: (
      parent: undefined,
      args: ArgsDeleteEvent,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Event | null | Promise<Event | null>
  }
}

export namespace LoginPayloadResolvers {
  export const defaultResolvers = {
    success: (parent: LoginPayload) => parent.success,
  }

  export type SuccessResolver = (
    parent: LoginPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => boolean | Promise<boolean>

  export interface Type {
    success: (
      parent: LoginPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => boolean | Promise<boolean>
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type
  Viewer: ViewerResolvers.Type
  User: UserResolvers.Type
  Ticket: TicketResolvers.Type
  Event: EventResolvers.Type
  Mutation: MutationResolvers.Type
  LoginPayload: LoginPayloadResolvers.Type
}
